<script type="text/x-homegear">
{
    "name": "jsontable",
    "readableName": "json Table",
    "version": "0.0.1",
    "maxThreadCount": 1
}
</script>
<!--
  Copyright JS Foundation and other contributors, http://js.foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<style>
#tabledata{margin:10px 30px 30px;}
#tabledata {font-size:14px;font-weight:400;border:1px solid #f8f8f8;border-collapse:collapse;width:90%;max-width:90%;min-width:300px;white-space:nowrap;background-color:#fff}
#tabledata td,#tabledata th{text-align:center;padding:8px}
#tabledata td textarea{border:0px; width:100px;height:35px;overflow:auto;resize: none;}
#tabledata td{border-right:1px solid #f8f8f8;font-size:14px}
#tabledata thead th{color:#fff;background:#3FA9F5}
#tabledata thead th:nth-child(odd){color:#fff;background:#3FA9F5}
#tabledata tr:nth-child(even){background:#F8F8F8}
.table-editable td {
	position: relative;
	height: 46px;
}

.table-editable td.editing {
	min-width: 96px;
}
.editor-contextmenu ul{list-style-type:none;padding:0;margin-bottom:0}
.editor-contextmenu ul li a{color:inherit}
.editor-contextmenu ul li hr{margin-top:7px;margin-bottom:7px}
</style>
<script type="text/x-red" data-template-name="jsontable">
    <div class="form-row">
        <label for="node-input-name"><i class="fa fa-tag"></i> <span data-i18n="jsontable.label.name"></span></label>
        <input type="text" id="node-input-name" data-i18n="[placeholder]jsontable.label.name">
    </div>
    <div id="tabledatadiv" class="form-row table-wrapper">
    	<table id="tabledata">
    	
    	</table>
    </div>
    <div class="form-row" style="margin-bottom: 0px;">
    <label for="node-input-func"><i class="fa fa-wrench"></i> <span data-i18n="jsontable.label.function"></span></label>
    <input type="hidden" id="node-input-func" >
    <input type="hidden" id="node-input-noerr">
	</div>
    <div class="form-row" style="position: relative; margin-bottom: 0px;">
    <label for="node-input-func"><i class="fa fa-file-code-o"></i> <span data-i18n="template.label.template"></span></label>
    <input type="hidden" id="node-input-func" autofocus="autofocus">
    <div style="position: absolute; right:0;display:inline-block; text-align: right; font-size: 0.8em;">
        <span data-i18n="jsontable.label.format"></span>:
        <select id="node-input-format" style="width:110px; font-size: 10px !important;  height: 24px; padding:0;">
            <option value="json">JSON</option>
        </select>
    </div>
</div>
	<div class="form-row node-text-editor-row">
	    <div style="height: 250px; min-height:150px;" class="node-text-editor" id="node-input-func-editor"></div>
	</div>
    <div class="form-tips"><span data-i18n="jsontable.tip"></span></div>
</script>
<script type="text/javascript">
/* Function extendet for JSON Table*/
!function(n){"use strict";n.fn.tableToJSON=function(r){r=n.extend({ignoreColumns:[],onlyColumns:null,ignoreHiddenRows:!0,headings:null,allowHTML:!1},r);var t,i,e=function(n){return null!=n},o=function(t){return e(r.onlyColumns)?-1===n.inArray(t,r.onlyColumns):-1!==n.inArray(t,r.ignoreColumns)},l=function(t,i){var l,a;if(!o(t)){var s=n(i).data("override");l=r.allowHTML?n.trim(n(i).html()):n.trim(n(i).text()),a=e(s)?s:l}return a};return function(t,i){var a,s,u,f,c,h,d,g=[],p=0,m=[];return t.children("tbody,*").children("tr").each(function(t,i){(t>0||e(r.headings))&&(!(h=n(i)).is(":visible")&&r.ignoreHiddenRows||(g[t]||(g[t]=[]),p=0,h.children().each(function(){if(!o(p)){if((d=n(this)).filter("[rowspan]").length)for(u=parseInt(d.attr("rowspan"),10)-1,c=l(p,d),a=1;a<=u;a++)g[t+a]||(g[t+a]=[]),g[t+a][p]=c;if(d.filter("[colspan]").length)for(u=parseInt(d.attr("colspan"),10)-1,c=l(p,d),a=1;a<=u;a++)if(d.filter("[rowspan]").length)for(f=parseInt(d.attr("rowspan"),10),s=0;s<f;s++)g[t+s][p+a]=c;else g[t][p+a]=c;for(;g[t][p];)p++;o(p)||(c=g[t][p]||l(p,d),e(c)&&(g[t][p]=c))}p++})))}),n.each(g,function(r,t){e(t)&&(c=function(r,t){var i={},o=0;return n.each(t,function(n,t){o<r.length&&e(t)&&(i[r[o]]=t,o++)}),i}(i,t),m[m.length]=c)}),m}(this,(i=this.find("tr:first").first(),e(r.headings)?r.headings:(t=[],n(i).children("td,th").each(function(n,r){o(n)||t.push(l(n,r))}),t)))}}(jQuery);
!function(t){t.fn.JSONToTable=function(e){var a=t.extend({head:[],json:[]},e,{table:this});return table=this,table.data("settings",a),0==table.find("thead").length&&table.append(t("<thead></thead>").append("<tr></tr>")),0==table.find("thead").find("tr").length&&table.find("thead").append("<tr></tr>"),0==table.find("tbody").length&&table.append(t("<tbody></tbody>")),t.each(a.head,function(t,e){table.find("thead").find("tr").append("<th>"+e+"</th>")}),table},t.fn.jsonTableUpdate=function(e){var a=t.extend({source:void 0,rowClass:void 0,callback:void 0},e),n=this.data("settings");"string"==typeof a.source?t.get(a.source,function(e){t.fn.updateFromObj(e,n,a.rowClass,a.callback)}):"object"==typeof a.source&&t.fn.updateFromObj(a.source,n,a.rowClass,a.callback)},t.fn.updateFromObj=function(e,a,n,d){a.table.find("tbody").empty(),t.each(e,function(e,d){var o=t("<tr></tr>").addClass(n);t.each(a.json,function(a,n){"*"==n?o.append(t("<td>"+(e+1)+"</td>")):o.append(t("<td>"+d[this]+"</td>"))}),a.table.append(o)}),"function"==typeof d&&d(),t(window).trigger("resize")}}(jQuery);

jQuery.tableEditor = {
		langs: {
			en: {
				insert_row_above: 'Insert row above',
				insert_row_below: 'Insert row below',
				insert_column_on_the_left: 'Insert column on the left',
				insert_column_on_the_right: 'Insert column on the right',
				remove_row: 'Remove row',
				remove_column: 'Remove column'
			},
			de: {
				insert_row_above: 'Insert row above',
				insert_row_below: 'Insert row below',
				insert_column_on_the_left: 'Insert column on the left',
				insert_column_on_the_right: 'Insert column on the right',
				remove_row: 'Remove row',
				remove_column: 'Remove column'
			},
		}
	}

	;(function (navigator, window, document, $) {
		'use strict'

		// Helpers
		$.fn.tableEditor = function (options, params) {
			var tableEditorDataName = 'tableEditor'
			if (options === Object(options) || !options) {
				return this.each(function () {
					if (!$(this).data(tableEditorDataName))
						$(this).data(tableEditorDataName, new tableEditor(this, options))
				})
			}

			if (this.length === 1) {
				var editor = $(this).data(tableEditorDataName)
				if (editor[options])
					return editor[options](params)
			}
		}

		// @param: table is the DOM element
		var tableEditor = function (table, options) {
			var editor = this

			// Get the document of the element. It use to makes the plugin compatible on iframes.
			editor.document = table.ownerDocument || document

			// jQuery object of the editor
			editor.table = $(table) // $ta : Textarea

			options = options || {}

			// Language/localization
			if (options.lang != null || $.tableEditor.langs[options.lang] != null)
				editor.lang = $.extend(true, {}, $.tableEditor.langs.en, $.tableEditor.langs[options.lang])
			else
				editor.lang = $.tableEditor.langs.en

			// Defaults Options
			editor.options = {
				lang: options.lang || 'en',
				onChange: options.onChange || function() {}
			}

			editor.init()
		}

		tableEditor.prototype = {
			// Initialize the editor
			init: function() {
				$(this.table).addClass('table-editable')

				// Binds
				this.binds()
			},

			// Binds
			binds: function() {
				var editor = this

				// Debug: Row and cell
				$(this.table).on('click.tableEditor', 'td', function() {
					var col = $(this).index(),
						$tr = $(this).closest('tr'),
						row = $tr.index()

					editor.edit($(this))
				});
				// Debug: Row and cell
				$(this.table).on('click.tableEditor', 'th', function() {
					var col = $(this).index(),
						$tr = $(this).closest('tr'),
						row = $tr.index()

					editor.edit($(this))
				});

				// Right click (context menu)
				$(this.table).on('contextmenu.tableEditor', 'td', function(e) {
					var td = this,
						col = $(this).index(),
						$tr = $(this).closest('tr'),
						row = $tr.index(),
						width = $tr.find('> td').length

					$('.editor-contextmenu').remove()
					var popover = $(this).popover({
						trigger: 'manual',
						placement: 'bottom',
						container: 'body',
						html: true,
						template: '<div class="popover editor-contextmenu" role="tooltip">' + '<div class="arrow" style="top: 50%;display:hidden;"></div>' + '<h3 class="popover-title"></h3>' + '<div class="popover-content"></div></div>',
						content: '<ul><li>' + ([
							'<a href="#" data-action="insert_row_above">' + jQuery.tableEditor.langs[editor.options.lang].insert_row_above + '</a>',
							'<a href="#" data-action="insert_row_below">' + jQuery.tableEditor.langs[editor.options.lang].insert_row_below + '</a>',
							'<hr/>',
							'<a href="#" data-action="insert_column_on_the_left">' + jQuery.tableEditor.langs[editor.options.lang].insert_column_on_the_left + '</a>',
							'<a href="#" data-action="insert_column_on_the_right">' + jQuery.tableEditor.langs[editor.options.lang].insert_column_on_the_right + '</a>',
							'<hr/>',
							'<a href="#" data-action="remove_row">' + jQuery.tableEditor.langs[editor.options.lang].remove_row + '</a>',
							'<a href="#" data-action="remove_column">' + jQuery.tableEditor.langs[editor.options.lang].remove_column + '</a>'
						]).join('</li><li>') + '</li></ul>'
					}).popover('show')
					$('.editor-contextmenu a').off('click').on('click', function(e) {
						editor.action($(this).data('action'), td)
						e.preventDefault()
					})
					e.preventDefault()
				})

				$('body').off('click.tableEditor').on('click.tableEditor', function (e) {
					if ($('.popover').is(':visible'))
						$('.table-editable').find('td').each(function(index, element) {
							if ($(element).popover)
								$(element).popover('hide')
						})
				})
			},

			// Destroy the editor
			destroy: function () {
				$(this.table)
					.off('click.tableEditor')
					.off('contextmenu.tableEditor')
					.removeClass('table-editable')
					.removeData('tableEditor')
			},

			// Set/Get JSON
			json: function(json) {
				// Get
				if (!json) {
					var result = []
					$.each($(this.table).find('tr'), function(row_number, row) {
						var tr = []
						$.each($(row).find('td'), function(cell_number, cell) {
							tr.push($(cell).html())
						})
						result.push(tr)
					})
					return JSON.stringify(result)
				// Set
				} else {
					if (typeof json != 'object')
						json = JSON.parse(json)
					var html = ''
					$.each(json, function(row_number, row) {
						html += '<tr data-row="' + row_number + '">'
						$.each(row, function(cell_number, cell) {
							html += '<td data-row="' + row_number + '" data-cell="' + cell_number + '">' + cell + '</td>'
						})
						html += '</tr>'
					})
					html = '<table class="table table-bordered table-editable"><tbody>' + html + '</tbody></table>'
					$(this.table).html(html)
					return html
				}
			},

			// Edit
			edit: function(cell) {
				if ($(cell).hasClass('editing'))
					return
				// Edit cell
				var editor = this,
					value = $(cell).html(),
					input = $('<textarea class="editor">'+$(cell).html()+'</textarea>')
				$(cell).addClass('editing').html(input);
				$(input)
					.focus()
					.val(value.replace(/<br>/g, '\r'))
					.on('blur', function() {
						$(cell).html($(input).val().replace(/(\r\n|\n\r|\r|\n)/g, '<br>'))
						$(cell).removeClass('editing')
						editor.options.onChange($(input).val(), cell, editor.table, editor)
						$(input).remove()
					})
			},

			// Action
			action: function(name, td) {
				var editor = this,
					col = $(td).index(),
					$tr = $(td).closest('tr'),
					row = $tr.index(),
					width = $tr.find('> td').length,
					tbody = $(editor.table).find('tbody')

				if (name == 'insert_row_above'){
					$(td).parent().before('<tr>' + ('<td>data</td>').repeat(width) + '</tr>');
					editor.options.onChange(null, null, editor.table, editor);
					
				}
				if (name == 'insert_row_below'){
					$(td).parent().after('<tr>' + ('<td>data</td>').repeat(width) + '</tr>');
					editor.options.onChange(null, null, editor.table, editor);

				}
					if (name == 'insert_column_on_the_left'){
						$(editor.table).find('th:nth-child(' + (col + 1) + ')').before('<th>head</th>');
						$(editor.table).find('td:nth-child(' + (col + 1) + ')').before('<td>data</td>');
						editor.options.onChange(null, null, editor.table, editor);
					}
					if (name == 'insert_column_on_the_right'){
						$(editor.table).find('th:nth-child(' + (col + 1) + ')').after('<th>head</th>');
						$(editor.table).find('td:nth-child(' + (col + 1) + ')').after('<td>data</td>');
						editor.options.onChange(null, null, editor.table, editor);
				
					}
				if (name == 'remove_row'){
					$(td).parent().remove();
					$("tbody:first-child").addClass('editing');
					$("tbody:first-child").removeClass('editing');
					editor.options.onChange(null, null, editor.table, editor);
				}
				if (name == 'remove_column'){
					$(editor.table).find('th:nth-child(' + (col + 1) + ')').remove();
					$(editor.table).find('td:nth-child(' + (col + 1) + ')').remove();
					editor.options.onChange(null, null, editor.table, editor);
				}

				// Prevent empty table
				$(tbody).find('tr').each(function(index, element) {
					if ($(element).html().trim() == '')
						$(element).remove()
				})
				if ($(tbody).children().length == 0)
					$(tbody).html('<tr><td></td></tr>')

				// Close context menu
				$('.editor-contextmenu').remove()
			}
		}
	})(navigator, window, document, jQuery);


RED.nodes.registerType('jsontable',{
        color:"#74a4a4",
        category: 'input',
        defaults: {
            name: {value:""},
            func:{value:'[{"colum1":"data","colum2":"data","colum3":"data","colum4":"data"},{"colum1":"data","colum2":"data","colum3":"data","colum4":"data"},{"colum1":"data","colum2":"data","colum3":"data","colum4":"data"},{"colum1":"data","colum2":"data","colum3":"data","colum4":"data"}]'},
            aspayload:{value:false},
            noerr: {value:0,required:true,validate:function(v){ return ((!v) || (v === 0)) ? true : false; }}
        },
        inputs:1,
        outputs:1,
        icon: "arrow-in.png",
        label: function() {
            return this.name;
        },
        oneditprepare: function() {
            var that = this;
            this.editor = RED.editor.createEditor({
                id: 'node-input-func-editor',
                mode: {path:"ace/mode/json", inline:true},
                value: $("#node-input-func").val()
            });
            this.editor.focus();
            var headarr=[];
            $(jQuery.parseJSON(this.editor.getValue())).each(function() {headarr=Object.keys(this);});
            $("#tabledata").JSONToTable({head : headarr,json : headarr});
            var options = {
            		source: JSON.parse(this.editor.getValue()),
            		callback: function(){
    			    		$('#tabledata').tableEditor({
    			    				onChange: function(value, cell, table, tableEditor) {
    			    				that.editor.getSession().setValue(JSON.stringify($('#tabledata').tableToJSON(),null,4));
    			    				}
    			    		});		
           }};
            $("#tabledata").jsonTableUpdate(options);
            $("#node-input-payload").typedInput('type',this.payloadType);

        },
        oneditsave: function() {
            var annot = this.editor.getSession().getAnnotations();
            this.noerr = 0;
            $("#node-input-noerr").val(0);
            for (var k=0; k < annot.length; k++) {
                //console.log(annot[k].type,":",annot[k].text, "on line", annot[k].row);
                if (annot[k].type === "error") {
                    $("#node-input-noerr").val(annot.length);
                    this.noerr = annot.length;
                }
            }
            $("#node-input-func").val(this.editor.getValue());
            delete this.editor;
        },
        oneditresize: function(size) {

        }
    });
</script>
